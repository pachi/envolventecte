# Bugs ES

- Revisar compatibilidad en Chrome: en particular los cambios en datos generales
- Comprobar por qué se carga un n50 inicialmente que no está en el archivo (no hay ensayo pero se coge uno que no es el n50_ref).
- En la gráfica de K eliminar espacio blanco antes de tabla viendo cómo se oculta el display="none" del svg con los defs en IconsOrientaciones.js de climas.

# Mejoras ES

- Replantear pantalla de entrada
    - Logo + información general
    - Panel de indicadores para el archivo cargado
    - Área de carga de datos
- Mostrar inclinación como icono (una barra con una flecha indicando la normal)
- Mostrar azimuth como icono (igual que en climas)
- Añadir definición geométrica en todos los constructores de elementos del modelo (ahora mismo no se añade geometry en huecos / opacos, ni position, polygon en sombras)
- Mostrar tooltip en los elementos con avisos
- ThreeView
    - Roseta de norte
    - Activar / desactivar plano y rejilla de suelo
    - Clipping plane: https://github.com/agviegas/IFC.js/commit/9be223de323e6acd936d9493eda5753a4ffe8183
    - Seleccionar elemento activo en las tablas del modelo (y, al revés, mostrar elementos seleccionados en 3D), selecciones múltiples

# Nueva funcionalidad

- Editor de geometría
- Añadir cálculo de F_sh;obst
- Elementos: calcular acristalamientos con sombras móviles usando directamente parámetros U_gl, g_gl_n, tau_e_B y ro_e_B
- Construcciones de opacos definidas por capas + editor de capas
- Trasladar construcción a modelo desde "Elementos" o... editor de elemento

# Reorganizaciones

## Rust + ES
- Cambiar datos para que todos los elementos con definición geométrica tengan la misma estructura
    - geometry: {tilt, azimuth, position, polygon}, también las sombras
- Cambiar estructura de datos de elementos: ElementData (antes Uvalues):
    - U_mean? -> en KSummary y en UValues (cambiar a ElementData)
    - Comprobación de si un elemento está dentro o fuera de la ET: wall_inside_tenv de utils.js -> llevarlo a UValues -> ElementData
- Ver si es posible llevar la salida del logging de Rust a los avisos de wasm
    - Guardar en cada bloque de hulc los avisos y recolectarlos en la conversión a objetos y luego trasladarlos a wasm
- Llevar a wasm:
    - Agrupar elementos (espacios, muros, huecos, PTs)
    - Datos de clima?
    - Default de elementos (constructor), con implementaciones manuales (ver uuid)

## ES
- Mover a utils.js diccionarios de tipos de climas, orientaciones, etc.
- ¿Función model_to_state(JSONmodel) que descomponga el modelo y lo lleve a appstate?
- Trasladar datos a public/data? (usando luego fetch o direcciones como <a href={process.env.PUBLIC_URL + "/data/zcraddata.json"}>Enlace</a>)
