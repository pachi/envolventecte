# Bugs ES

- Revisar compatibilidad en Chrome: en particular los cambios en datos generales
- ¿Comprobar por qué se carga un n50 inicialmente que no está en el archivo (no hay ensayo pero se coge uno que no es el n50_ref).?
- Comprobar que se calcula bien el volumen de espacios con techos inclinados (suma de volúmenes con signo de los tetraedros https://stackoverflow.com/questions/1406029/how-to-calculate-the-volume-of-a-3d-mesh-object-the-surface-of-which-is-made-up-t )

# Mejoras ES

- Agrupar edición de geometría en opacos y sombras para que tenga inserción y polígono, parecido a los huecos
    - Ponemos varias filas: posición y un notebook de: polígono | alto + ancho | area | alto + area
- Mostrar inclinación como icono (una barra con una flecha indicando la normal)?
- Mostrar azimuth como icono (igual que en climas)?
- Añadir valores de referencia HE nuevos y existentes, apéndice E, etc a gráficas
- Mostrar tooltip en los elementos con avisos
- ThreeView
    - Roseta de norte
    - Activar / desactivar plano y rejilla de suelo
    - Clipping plane: https://github.com/agviegas/IFC.js/commit/9be223de323e6acd936d9493eda5753a4ffe8183
    - Seleccionar elemento activo en las tablas del modelo (y, al revés, mostrar elementos seleccionados en 3D), selecciones múltiples

# Nueva funcionalidad

- Huecos no rectangulares
- Muros con puntos 3D
- Definición de lamas en huecos
- Conversión de aletas y viseras de huecos en HULC a sombras independientes (pensar interacción con Fshobst).
- A partir de la información geométrica, añadir:
    - cálculo de F_sh;obst
    - estimación de longitudes de PTs
- Elementos: calcular acristalamientos con sombras móviles usando directamente parámetros U_gl, g_gl_n, tau_e_B y ro_e_B
- Elementos: añadir nueva construcción de hueco a partir de pestaña de elementos
- Elementos: Construcciones de opacos definidas por capas + editor de capas
- Construcciones de opacos: posibilidad de usar definición actual o por capas

# Reorganizaciones

## Rust + ES
- Cambiar estructura de datos de elementos: ElementData (antes Uvalues):
    - U_mean? -> en KSummary y en UValues (cambiar a ElementData)
    - Comprobación de si un elemento está dentro o fuera de la ET:
        - wall_inside_tenv de utils.js -> llevarlo a UValues -> ElementData
        - o tener un apartado con ids de elementos dentro de la ET
- Ver si es posible llevar la salida del logging de Rust a los avisos de wasm
    - Guardar en cada bloque de hulc los avisos y recolectarlos en la conversión a objetos y luego trasladarlos a wasm
- Llevar a wasm:
    - Agrupar elementos (espacios, muros, huecos, PTs)
    - Datos de clima?
    - Default de elementos (constructor), con implementaciones manuales (ver uuid)

## ES
- ¿Función model_to_state(JSONmodel) que descomponga el modelo y lo lleve a appstate?
- Trasladar datos a public/data? (usando luego fetch o direcciones como <a href={process.env.PUBLIC_URL + "/data/zcraddata.json"}>Enlace</a>)
